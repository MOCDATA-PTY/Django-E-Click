# Generated by Django 5.2.4 on 2025-08-15 08:14

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AIConversation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.CharField(blank=True, max_length=100)),
                ('session_id', models.CharField(max_length=100)),
                ('question', models.TextField()),
                ('answer', models.TextField()),
                ('was_helpful', models.BooleanField(blank=True, null=True)),
                ('response_time', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'AI Conversation',
                'verbose_name_plural': 'AI Conversations',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AIKnowledgeBase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.TextField()),
                ('answer', models.TextField()),
                ('confidence_score', models.FloatField(default=0.0)),
                ('usage_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.CharField(blank=True, max_length=100)),
                ('tags', models.JSONField(blank=True, default=list)),
            ],
            options={
                'verbose_name': 'AI Knowledge Entry',
                'verbose_name_plural': 'AI Knowledge Base',
                'ordering': ['-confidence_score', '-usage_count'],
            },
        ),
        migrations.CreateModel(
            name='AILearningMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_conversations', models.IntegerField(default=0)),
                ('successful_responses', models.IntegerField(default=0)),
                ('average_response_time', models.FloatField(default=0.0)),
                ('knowledge_base_size', models.IntegerField(default=0)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'AI Learning Metric',
                'verbose_name_plural': 'AI Learning Metrics',
            },
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=100, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('password', models.CharField(blank=True, max_length=128)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='client_profile_pictures/')),
                ('is_active', models.BooleanField(default=True)),
                ('has_changed_password', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='SubTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('is_completed', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('completed', 'Completed')], default='not_started', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=20)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='BackupFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filename', models.CharField(max_length=255, unique=True)),
                ('file_path', models.CharField(max_length=500)),
                ('file_size', models.BigIntegerField(help_text='File size in bytes')),
                ('backup_type', models.CharField(choices=[('manual', 'Manual Backup'), ('automatic', 'Automatic Backup'), ('uploaded', 'Uploaded Backup')], default='manual', max_length=20)),
                ('status', models.CharField(choices=[('available', 'Available'), ('corrupted', 'Corrupted'), ('restored', 'Restored')], default='available', max_length=20)),
                ('description', models.TextField(blank=True, help_text='Optional description of this backup')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('restored_at', models.DateTimeField(blank=True, null=True)),
                ('database_version', models.CharField(blank=True, max_length=50)),
                ('total_records', models.IntegerField(default=0)),
                ('backup_checksum', models.CharField(blank=True, help_text='SHA256 checksum for integrity verification', max_length=64)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_backups', to=settings.AUTH_USER_MODEL)),
                ('restored_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='restored_backups', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Backup File',
                'verbose_name_plural': 'Backup Files',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('client', models.CharField(max_length=200)),
                ('client_email', models.EmailField(max_length=254)),
                ('status', models.CharField(choices=[('planned', 'Planned'), ('in_progress', 'In Progress'), ('completed', 'Completed')], default='planned', max_length=20)),
                ('client_username', models.CharField(blank=True, help_text="Client's username for login", max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_users', models.ManyToManyField(blank=True, help_text='Users assigned to this project', related_name='assigned_projects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProjectUpdate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('update_type', models.CharField(choices=[('created', 'Created'), ('status_changed', 'Status Changed'), ('deadline_extended', 'Deadline Extended'), ('assigned', 'Assigned'), ('reassigned', 'Reassigned'), ('description_updated', 'Description Updated'), ('client_changed', 'Client Changed')], max_length=25)),
                ('reason', models.TextField(blank=True, help_text='Reason for the change')),
                ('old_value', models.CharField(blank=True, help_text='Previous value before the change', max_length=100)),
                ('new_value', models.CharField(blank=True, help_text='New value after the change', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='updates', to='home.project')),
                ('user', models.ForeignKey(help_text='User who made the update', on_delete=django.db.models.deletion.CASCADE, related_name='project_updates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SentReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_type', models.CharField(choices=[('general', 'General Report'), ('project', 'Project Report'), ('client', 'Client Report'), ('friday', 'Friday Report'), ('complete', 'Complete Report')], max_length=20)),
                ('recipient_email', models.EmailField(max_length=254)),
                ('report_title', models.CharField(blank=True, max_length=200)),
                ('report_data', models.JSONField(blank=True, default=dict)),
                ('custom_message', models.TextField(blank=True)),
                ('sent_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('sent', 'Sent'), ('failed', 'Failed'), ('delivered', 'Delivered')], default='sent', max_length=20)),
                ('related_client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='home.client')),
                ('related_project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='home.project')),
                ('sent_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_reports', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Sent Report',
                'verbose_name_plural': 'Sent Reports',
                'ordering': ['-sent_at'],
            },
        ),
        migrations.CreateModel(
            name='SubTaskComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField()),
                ('is_admin_response', models.BooleanField(default=False, help_text='Whether this is an admin response to a team comment')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent_comment', models.ForeignKey(blank=True, help_text='Parent comment if this is a reply', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='home.subtaskcomment')),
                ('subtask', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='home.subtask')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subtask_comments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('on_hold', 'On Hold'), ('cancelled', 'Cancelled')], default='not_started', max_length=20)),
                ('development_status', models.CharField(choices=[('original_quoted', 'Original/Quoted Development'), ('new_development', 'New Development'), ('new_development_qms', 'New Development – QMS must be involved'), ('new_development_qms_change', 'New Development – QMS Change'), ('new_quoted_development', 'New Development/Quoted Development'), ('ongoing_development', 'Ongoing Development')], default='original_quoted', help_text='Type of development for this task', max_length=50)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', help_text='Priority level of this task', max_length=20)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('estimated_hours', models.DecimalField(blank=True, decimal_places=2, help_text='Estimated hours to complete this task', max_digits=6, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_users', models.ManyToManyField(blank=True, help_text='Users assigned to this specific task', related_name='assigned_tasks', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='home.project')),
            ],
            options={
                'ordering': ['start_date', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='SystemLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('login', 'Login'), ('logout', 'Logout'), ('task_status_change', 'Task Status Change'), ('task_priority_change', 'Task Priority Change'), ('task_created', 'Task Created'), ('task_edited', 'Task Edited'), ('task_deleted', 'Task Deleted'), ('task_assigned', 'Task Assigned'), ('task_comment_added', 'Task Comment Added'), ('project_created', 'Project Created'), ('project_edited', 'Project Edited'), ('project_deleted', 'Project Deleted'), ('project_status_change', 'Project Status Change'), ('project_assigned', 'Project Assigned'), ('user_created', 'User Created'), ('user_edited', 'User Edited'), ('user_deleted', 'User Deleted'), ('user_permissions_changed', 'User Permissions Changed'), ('user_suspended', 'User Suspended'), ('user_activated', 'User Activated'), ('client_created', 'Client Created'), ('client_edited', 'Client Edited'), ('client_deleted', 'Client Deleted'), ('client_activated', 'Client Activated'), ('client_deactivated', 'Client Deactivated'), ('subtask_created', 'Subtask Created'), ('subtask_edited', 'Subtask Edited'), ('subtask_deleted', 'Subtask Deleted'), ('subtask_status_change', 'Subtask Status Change'), ('report_generated', 'Report Generated'), ('report_sent', 'Report Sent'), ('backup_created', 'Backup Created'), ('backup_restored', 'Backup Restored'), ('system_settings_changed', 'System Settings Changed'), ('login_attempt_failed', 'Login Attempt Failed'), ('account_locked', 'Account Locked'), ('account_unlocked', 'Account Unlocked'), ('navigation', 'Navigation')], max_length=30)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('os_info', models.CharField(blank=True, max_length=100, null=True)),
                ('browser_info', models.CharField(blank=True, max_length=100, null=True)),
                ('additional_info', models.JSONField(blank=True, default=dict)),
                ('related_client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='home.client')),
                ('related_project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='home.project')),
                ('related_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='logs_about_user', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('related_task', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='home.task')),
            ],
            options={
                'verbose_name': 'System Log',
                'verbose_name_plural': 'System Logs',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.AddField(
            model_name='subtask',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subtasks', to='home.task'),
        ),
        migrations.CreateModel(
            name='TaskComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField()),
                ('is_admin_response', models.BooleanField(default=False, help_text='Whether this is an admin response to a team comment')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent_comment', models.ForeignKey(blank=True, help_text='Parent comment if this is a reply', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='home.taskcomment')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='home.task')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='task_comments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TaskUpdate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('update_type', models.CharField(choices=[('completed', 'Completed'), ('delayed', 'Delayed'), ('on_hold', 'On Hold'), ('in_progress', 'In Progress'), ('not_started', 'Not Started'), ('status_changed', 'Status Changed'), ('priority_changed', 'Priority Changed'), ('deadline_extended', 'Deadline Extended'), ('assigned', 'Assigned'), ('reassigned', 'Reassigned')], max_length=20)),
                ('reason', models.TextField(blank=True, help_text='Reason for delay or status change')),
                ('estimated_completion', models.DateField(blank=True, help_text='New estimated completion date if delayed', null=True)),
                ('old_value', models.CharField(blank=True, help_text='Previous value before the change', max_length=100)),
                ('new_value', models.CharField(blank=True, help_text='New value after the change', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='updates', to='home.task')),
                ('user', models.ForeignKey(help_text='User who made the update', on_delete=django.db.models.deletion.CASCADE, related_name='task_updates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/')),
                ('bio', models.TextField(blank=True, max_length=500)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('address', models.TextField(blank=True)),
                ('department', models.CharField(blank=True, max_length=100)),
                ('can_access_dashboard', models.BooleanField(default=True)),
                ('can_access_projects', models.BooleanField(default=True)),
                ('can_access_reports', models.BooleanField(default=True)),
                ('can_access_analytics', models.BooleanField(default=True)),
                ('can_access_admin', models.BooleanField(default=False)),
                ('can_manage_users', models.BooleanField(default=False)),
                ('can_manage_clients', models.BooleanField(default=False)),
                ('can_access_system_logs', models.BooleanField(default=False)),
                ('can_create_projects', models.BooleanField(default=False)),
                ('can_edit_projects', models.BooleanField(default=False)),
                ('can_delete_projects', models.BooleanField(default=False)),
                ('can_create_tasks', models.BooleanField(default=False)),
                ('can_edit_tasks', models.BooleanField(default=False)),
                ('can_delete_tasks', models.BooleanField(default=False)),
                ('can_view_system_logs', models.BooleanField(default=False)),
                ('can_access_backup_management', models.BooleanField(default=False)),
                ('can_access_system_monitoring', models.BooleanField(default=False)),
                ('is_suspended', models.BooleanField(default=False)),
                ('suspension_reason', models.TextField(blank=True, null=True)),
                ('suspension_until', models.DateTimeField(blank=True, null=True)),
                ('max_login_attempts', models.IntegerField(default=5)),
                ('current_login_attempts', models.IntegerField(default=0)),
                ('last_failed_login', models.DateTimeField(blank=True, null=True)),
                ('account_locked_until', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ClientOTP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('otp', models.CharField(max_length=6)),
                ('is_used', models.BooleanField(default=False)),
                ('expires_at', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.client')),
            ],
            options={
                'ordering': ['-created_at'],
                'constraints': [models.UniqueConstraint(condition=models.Q(('is_used', False)), fields=('client', 'is_used'), name='unique_active_client_otp')],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('task_completed', 'Task Completed'), ('task_delayed', 'Task Delayed'), ('task_on_hold', 'Task On Hold'), ('task_update', 'Task Update'), ('task_status_change', 'Task Status Change'), ('task_duration_extended', 'Task Duration Extended'), ('task_comment_added', 'Task Comment Added'), ('task_comment_response', 'Admin Response to Task Comment'), ('subtask_comment_added', 'Subtask Comment Added'), ('subtask_comment_response', 'Admin Response to Subtask Comment'), ('project_update', 'Project Update'), ('admin_message', 'Admin Message'), ('project_status_change', 'Project Status Change'), ('project_created', 'Project Created'), ('task_created', 'Task Created'), ('subtask_created', 'Subtask Created'), ('deadline_extended', 'Deadline Extended'), ('priority_changed', 'Priority Changed')], max_length=25)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('is_admin_notification', models.BooleanField(default=False, help_text='Whether this is an admin-generated notification')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('recipient', models.ForeignKey(blank=True, help_text='Leave blank for system-wide notifications', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='notifications', to=settings.AUTH_USER_MODEL)),
                ('triggered_by', models.ForeignKey(blank=True, help_text='User who triggered this notification', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='triggered_notifications', to=settings.AUTH_USER_MODEL)),
                ('related_project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='home.project')),
                ('related_subtask', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='home.subtask')),
                ('related_subtask_comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='home.subtaskcomment')),
                ('related_task', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='home.task')),
                ('related_comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='home.taskcomment')),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('recipient', 'notification_type', 'related_subtask'), ('recipient', 'notification_type', 'related_task', 'related_project')},
            },
        ),
        migrations.CreateModel(
            name='UserOTP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('otp', models.CharField(max_length=6)),
                ('is_used', models.BooleanField(default=False)),
                ('expires_at', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'constraints': [models.UniqueConstraint(condition=models.Q(('is_used', False)), fields=('user', 'is_used'), name='unique_active_user_otp')],
            },
        ),
    ]
